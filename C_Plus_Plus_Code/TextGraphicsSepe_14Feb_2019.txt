

//
//  TextGraphicsSeperation.cpp
//  DocScanImageProcessing
//
//  Created by tmondal on 16/07/2018.
//  Copyright Â© 2018 Tanmoy. All rights reserved.
//


#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>

#include "hdr/LogoDetectionTechnique.hpp"
#include "ImageFiltering/hdr/AnisotropicGaussianFilter.h"
#include "ImageFiltering/hdr/AdaptiveNonlocalFiltering.h"
#include "Binarization/hdr/PopularDocBinarization.hpp"
#include "ImageProcessing/SLIC_SuperPIxels/SLIC_Original.h"
#include "ImageProcessing/hdr/NoisyBorderRemoval.hpp"
#include "ImageProcessing/hdr/Apply_SLIC_SuperPixels.h"

#include "Binarization/hdr/Feature_Space_Partition_Binarization.h"
#include "Binarization/hdr/GatosBinarization.h"

#include "PatternRecogAlgos/Clustering/K_Means_Clustering.h"

#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_S1_S2/hdr/Fuzzy_C_Means_S1.h"
#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_S1_S2/hdr/Fuzzy_C_Means_S2.h"

#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_M1/hdr/Fuzzy_C_Means_M1.h"

#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_FGfsm/hdr/Fuzzy_C_Means_FGfsm.h"
#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_FGfsm/hdr/Fuzzy_C_Means_FGfsm_S1.h"
#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_FGfsm/hdr/Fuzzy_C_Means_FGfsm_S2.h"

#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_FLIcm/hdr/Fuzzy_C_Means_FLIcm.h"

#include "PatternRecogAlgos/Fuzzy_C_Means/Fuzzy_C_Means_EN_FCM/hdr/Fuzzy_C_Means_ENFCM.h"
#include <opencv2/ximgproc.hpp>
#include "../ImageProcessing/hdr/SlicBy_OpenCV.h"
#include "opencv2/core/utility.hpp"
#include <highgui.h>
#include <cv.h>


// Copy the code from "19Jan_2019_TextGraphicsSeperation.txt" and replace from line 52 - 355, also uncomment the ln 481


using namespace cv::ximgproc;

Size kernalSize (5,5);
RNG rng(12345);
int main(int argc, char** argv) {
    cv::Ptr<StructuredEdgeDetection> pDollar = createStructuredEdgeDetection("/Users/tmondal/Documents/Workspace_C++/Text_Graphics_Seperation/DocScanImageProcessing/model.yml");


    // Testing Phase; Here we will choose an image then need to find the probable location of the logo

    Mat imgOrig = imread("/Volumes/Study_Materials/Dataset/Univ_Diploma/BDD3_JPEG/scan fujitsu/p03_CS_SF_coul_600.jpg", CV_LOAD_IMAGE_ANYDEPTH|CV_LOAD_IMAGE_UNCHANGED);
    //    Mat imgOrig = imread("/Users/tmondal/Documents/WordSpotting_Proj/Tobacco800_SinglePage/Tobacc800_GT_Alireza/SinglePagePNGNEW/1_25.png", CV_LOAD_IMAGE_ANYDEPTH|CV_LOAD_IMAGE_UNCHANGED);
    //    Mat imgOrig = imread("/Users/tmondal/Downloads/SLIC-Superpixels/dog.png");
    //    Mat imgOrig = imread("/Users/tmondal/Downloads/billboards/Moto Z2 play/IMG_20180819_152746060.jpg");
    //    Mat imgOrig = imread("/Users/tmondal/Documents/Workspace_C++/Text_Graphics_Seperation/Clion_Project/kuti.bmp");
    //    Mat imgOrig = imread("/Users/tmondal/Documents/wheel.png");
    //    Mat imgOrig = imread("/Users/tmondal/Documents/Aru_5.jpg");
    // Mat imgOrig = imread("/Users/tmondal/Documents/Imag_Input/b.png");
    if( imgOrig.empty())
    {
        cout << "File not available for reading"<<endl;
        return -1;
    }
    Mat imgGrey = imgOrig.clone(); // keeping seperately the original image

    /*   if (imgGrey.channels() < 3) // check if the image is grayscale
            cvtColor(imgGrey,imgGrey,COLOR_GRAY2RGB);*/
    Mat outputFuzzyImg;

    //     Fuzzy_C_Means_S1::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //     Fuzzy_C_Means_S2::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //
    //     Fuzzy_C_Means_M1::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //
    //     Fuzzy_C_Means_FGfsm::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //     Fuzzy_C_Means_FGfsm_S1::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //     Fuzzy_C_Means_FGfsm_S2::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //
    //     Fuzzy_C_Means_FLIcm::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);
    //
    //     Fuzzy_C_Means_ENFCM::getInstance()->applyAlgoOnImage(imgOrig, outputFuzzyImg);

    //     BasicAlgo::getInstance()->showImage(outputFuzzyImg);





    //    **********************************   Doing Adaptive Offset Filtering **************************************

    //    AdaptiveNonlocalFiltering doAdaptiveFiltering;
    //    doAdaptiveFiltering.offsetFilter(imgGrey,"Gaussian");
    //    **********************************   End of Adaptive Offset Filtering **************************************




    BasicAlgo::getInstance()->writeImageGivenPath(imgGrey,"/Users/tmondal/Documents/1_original_Image.jpg");
    auto start = chrono::steady_clock::now();

    // Also make IplImage, if in case you need it
    IplImage colorIplImage = BasicAlgo::getInstance()->MatToIplImage(imgGrey);  // this function needs color image
    if (imgGrey.channels() >= 3)
        cv::cvtColor(imgGrey, imgGrey, CV_BGR2GRAY);

    Mat binImage = Mat::zeros(imgGrey.rows, imgGrey.cols, imgGrey.type());
    // PopularDocBinarization::getInstance()->CalculateFeaturesForBinarization(imgGrey, binImage);
    // Feature_Space_Partition_Binarization::getInstance()->runBinarization(colorIplImage, binImage); // not giving sucessful results
    // GatosBinarization::getInstance()->runGaborBinarization(imgGrey,binImage ); // Gatos Binarization
    // PopularDocBinarization::getInstance()->callBinarizationFunction(imgGrey,binImage, 'w'); // Niblack, Savoula, Wolf_Jolin
    // PopularDocBinarization::getInstance()->binarizeDynamicWindows(imgGrey,binImage);



    //   **********************************   Doing Random Forest Based Edge Detection ********************************
    Mat colorImg;
    cv::cvtColor(imgGrey, colorImg, cv::COLOR_GRAY2BGR);
    Mat3b imgGreyCopy = (Mat3b) colorImg.clone();
    colorImg.release();

    Mat3f f_imgGrey;
    imgGreyCopy.convertTo(f_imgGrey, CV_32F, 1.0/255.0); // Convert source image to [0;1] range
    imgGreyCopy.release();

    Mat1f edgeImage;
    pDollar->detectEdges(f_imgGrey, edgeImage);
    f_imgGrey.release();

    // computes orientation from edge map
    Mat orientation_map;
    pDollar->computeOrientation(edgeImage, orientation_map);
    // suppress edges
    Mat edge_nms;
    pDollar->edgesNms(edgeImage, orientation_map, edge_nms, 2, 0, 1, true);
    edgeImage = 255 * edgeImage;

    BasicAlgo::getInstance()->writeImage(edgeImage);
    BasicAlgo::getInstance()->writeImageGivenPath(edgeImage,"/Users/tmondal/Documents/2_gradient_Image.jpg");

    orientation_map.release();
    edgeImage.release();
    //   **********************************   End of Random Forest Based Edge Detection ********************************



    Mat gray_image = imread("/Users/tmondal/Documents/Save_Image.jpg", CV_LOAD_IMAGE_GRAYSCALE);

    // *****               Anisotropic diffusion filter                    *****  //
    Mat filteredImage = gray_image.clone();
    filteredImage.convertTo(filteredImage, CV_32FC1);

    AnisotropicGaussianFilter filtImag = *new AnisotropicGaussianFilter();
    filtImag.doAnisotropicDiffusionFiltering(filteredImage, filteredImage.cols, filteredImage.rows);
    double min;
    double max;
    minMaxIdx(filteredImage, &min, &max);
    filteredImage.convertTo(filteredImage, CV_8UC1, 255 / (max - min), -min);
    BasicAlgo::getInstance()->writeImageGivenPath(filteredImage,"/Users/tmondal/Documents/3_filtered_Image.jpg");
    gray_image.release();


    // *****               Apply Canny Edge Detection                   *****  //
    Mat dummyMat;
    double otsuThreshVal = cv::threshold(filteredImage, dummyMat, 0, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
    dummyMat.release(); // delete the dummy mat
    double highThreshCanny  = otsuThreshVal;
    double lowThreshCanny = otsuThreshVal * 0.5;
    Canny(filteredImage, filteredImage, lowThreshCanny, highThreshCanny, 3);
    BasicAlgo::getInstance()->writeImageGivenPath(filteredImage,"/Users/tmondal/Documents/4_canny_Image.jpg");

    //    filteredImage = ImageFiltering::getInstance()->removeSmallNoisesDots(filteredImage);
    //    BasicAlgo::getInstance()->writeImageGivenPath(filteredImage,"/Users/tmondal/Documents/5_small_noiseRemoved_Image.jpg");

    // Perform dilation operationgali
    Mat dialationSE = getStructuringElement(MORPH_RECT, Size(7, 7));   // Define the structuring elements
    Mat dialatedImg;
    morphologyEx(filteredImage, dialatedImg, MORPH_DILATE, dialationSE); // Perform dilation operation
    filteredImage.release();
    BasicAlgo::getInstance()->writeImageGivenPath(dialatedImg,"/Users/tmondal/Documents/5_canny_dialted_Image.jpg");
    Mat holeFilledImg = Mat::zeros(dialatedImg.size(),CV_8U);


    // First application of hole filling
    FilteringMeanHeightWidth getHeightWidth = ImageFiltering::getInstance()->applyFloodFill(dialatedImg, holeFilledImg);
    dialatedImg.release();
    BasicAlgo::getInstance()->writeImageGivenPath(holeFilledImg,"/Users/tmondal/Documents/6_hole_filled_Image.jpg");


    // Second application of hole filling
    /*   IplImage copyHoleImg = holeFilledImg;
         IplImage* new_HoleFillimage = &copyHoleImg;
         holeFilledImg = cv::cvarrToMat(ImageFiltering::getInstance()->doImfill(cvCloneImage(new_HoleFillimage)));
         BasicAlgo::getInstance()->writeImageGivenPath(holeFilledImg,"/Users/tmondal/Documents/6_1_hole_filled_Image.jpg");*/


    /*    int horThres = ((getHeightWidth.mean_width * 65)/100);
        holeFilledImg = BasicProcessingTechniques::getInstance()->Horizontal_RLSATechnique(holeFilledImg, horThres);
        BasicAlgo::getInstance()->writeImageGivenPath(holeFilledImg,"/Users/tmondal/Documents/7_rlsa_Image.jpg");   */


    // obtaining the foreground image only (one way)

    /*    Mat foreGdImage = Mat::zeros(holeFilledImg.rows, holeFilledImg.cols, CV_8UC1);
        // foreGdImage.setTo(255);
        bitwise_and(imgGrey,holeFilledImg,foreGdImage);
        foreGdImage = BasicProcessingTechniques::getInstance()->ComplementImage(foreGdImage);
        BasicAlgo::getInstance()->writeImageGivenPath(foreGdImage,"/Users/tmondal/Documents/11_onlyForeGdImage_bitWise.jpg");   */


    // obtaining the foreground image only (2nd way)
    Mat foreGdImage = Mat::zeros(holeFilledImg.rows, holeFilledImg.cols, CV_8U);
    foreGdImage.setTo(255);

    for (int iRow = 0; iRow < holeFilledImg.rows; iRow++){
        for (int jCol = 0; jCol < holeFilledImg.cols; jCol++){
            if (holeFilledImg.at<uchar>(iRow, jCol) == 255){
                foreGdImage.at<uchar>(iRow, jCol) = imgGrey.at<uchar>(iRow, jCol);
            }
        }
    }
    BasicAlgo::getInstance()->writeImageGivenPath(foreGdImage,"/Users/tmondal/Documents/11_onlyForeGdImage_Mannual.jpg");


    /* Mat outputBin = Mat::zeros(foreGdImage.rows, foreGdImage.cols, CV_8U);
     PopularDocBinarization::getInstance()->binarizeSafait(foreGdImage,outputBin );
     BasicAlgo::getInstance()->writeImageGivenPath(outputBin,"/Users/tmondal/Documents/8_binarizedImage.jpg");*/



    /* Mat binaryHoleFilledImg = Mat::zeros(outputBin.size(),CV_8U);
    IplImage copy = BasicProcessingTechniques::getInstance()->ComplementImage(outputBin);
    IplImage* new_image = &copy;
    binaryHoleFilledImg = cv::cvarrToMat(ImageFiltering::getInstance()->doImfill(cvCloneImage(new_image)));
    outputBin.release();
    BasicAlgo::getInstance()->writeImageGivenPath(binaryHoleFilledImg,"/Users/tmondal/Documents/6_hole_filled_Image.jpg");*/




    // obtaining the foreground image only
    // Mat foreGdImage;
    /* Mat clearedForeGdImg = Mat::zeros(imgGrey.rows, imgGrey.cols, imgGrey.type());
    clearedForeGdImg.setTo(255);

    for (int iRow = 0; iRow < clearedForeGdImg.rows; iRow++){
        for (int jCol = 0; jCol < clearedForeGdImg.cols; jCol++){
            if (binaryHoleFilledImg.at<uchar>(iRow, jCol) == 255){
                clearedForeGdImg.at<uchar>(iRow, jCol) = imgGrey.at<uchar>(iRow, jCol);
            }
        }
    }
    BasicAlgo::getInstance()->writeImageGivenPath(clearedForeGdImg,"/Users/tmondal/Documents/9_1_onlyForeGdImage.jpg");*/



    /* Mat complementedBinImg = BasicProcessingTechniques::getInstance()->ComplementImage(outputBin);
     bitwise_and(imgGrey,complementedBinImg,clearedForeGdImg);
     BasicAlgo::getInstance()->writeImageGivenPath(clearedForeGdImg,"/Users/tmondal/Documents/9_onlyForeGdImage.jpg");*/




    // Now read the  "Sure and Confused Text Segmentation" and "Sure Text Result" images and the text file containing line segmentation results

    Mat sureTextImage = imread("/Users/tmondal/Documents/Sure_Text_Imag.jpg", CV_LOAD_IMAGE_UNCHANGED);
    Mat sureConfusedTextImage = imread("/Users/tmondal/Documents/Sure_and_Confused_Text_Imag.jpg", CV_LOAD_IMAGE_UNCHANGED);
    Mat BinaryWholeImage_Savoula = Mat::zeros(imgGrey.rows, imgGrey.cols, imgGrey.type());
    PopularDocBinarization::getInstance()->callBinarizationFunction(imgGrey,BinaryWholeImage_Savoula, 's'); // Niblack, Savoula, Wolf_Jolin
    BasicAlgo::getInstance()->writeImageGivenPath(BinaryWholeImage_Savoula,"/Users/tmondal/Documents/Savoula_Binary_Image.jpg");


    // Read the file
    std::fstream myfile("/Users/tmondal/Documents/11_onlyForeGdImage_Mannual.txt");
    int avgLineHeight, startLineRow,endLineRow;
    myfile >> avgLineHeight >> startLineRow >> endLineRow;
    // printf("%d\t %d \t %d \n",avgLineHeight, startLineRow, endLineRow);
    vector<blockImagProperties> keepAllBlockImag;
    PopularDocBinarization::getInstance()->LineWiseDivideImageIntoSubImages(imgGrey, avgLineHeight, imgGrey.cols,startLineRow, endLineRow, keepAllBlockImag);


    Mat DynamicWindowBinImage = (Mat::zeros(imgGrey.size(), imgGrey.type()));
    DynamicWindowBinImage = BasicProcessingTechniques::getInstance()->ComplementImage(DynamicWindowBinImage.clone());
    for (int iiSubParts = 0; iiSubParts < keepAllBlockImag.size(); iiSubParts++) {
        cout << "I am at block : " << iiSubParts << endl;
        cv::Rect getROI;

        getROI.x = keepAllBlockImag.at(iiSubParts).startX;
        getROI.width = keepAllBlockImag.at(iiSubParts).endX;
        getROI.y = keepAllBlockImag.at(iiSubParts).startY;
        getROI.height = keepAllBlockImag.at(iiSubParts).endY;

        Mat getSubSubImag = imgGrey(getROI);
        Mat getSubSubBinaryImag = sureTextImage(getROI);

        Mat resultBinSubImage ;
        PopularDocBinarization::getInstance()->SimpleDynamicWindowBased_Binarization(getSubSubImag, getSubSubBinaryImag, resultBinSubImage);
        resultBinSubImage.copyTo(DynamicWindowBinImage(getROI));
    }
    BasicAlgo::getInstance()->writeImageGivenPath(DynamicWindowBinImage,"/Users/tmondal/Documents/Mixed_Binary_Image.jpg");



    int winy = 5, winx = 5; // for 5x5 window check
    Mat CombineBinImage = sureTextImage;// Mat(imgGrey.size(), imgGrey.type(), Scalar(255));

    for (int iRow = 0; iRow < imgGrey.rows; iRow++){
        for (int jCol = 0; jCol < imgGrey.cols; jCol++){


/*            if (sureConfusedTextImage.at<uchar>(iRow, jCol) == 0){
                CombineBinImage.at<uchar>(iRow, jCol) = 0;
            } else */
            if ((sureConfusedTextImage.at<uchar>(iRow, jCol)  != 0) && (sureConfusedTextImage.at<uchar>(iRow, jCol)  != 255)){ // the other value


                // check if this value is present in both in savoula and dynamic window image, whether they both are text pixels or not
                if ((BinaryWholeImage_Savoula.at<uchar>(iRow, jCol) == 0 ) && (DynamicWindowBinImage.at<uchar>(iRow, jCol) == 0 )){

                    // see in the neighbourhood
                    int s_cnt = 0;
                    int x1 = 0, y1 = 0;
                    for(int k = -(winy/2); k <= (winy/2); k++){
                        for(int j = -(winx/2); j <= (winx/2); j++ ){
                            if(( k!=0) && (j != 0)) { // to avaoid the center pixel
                                x1 = PopularDocBinarization::getInstance()->reflect(imgGrey.cols, jCol - j);
                                y1 = PopularDocBinarization::getInstance()->reflect(imgGrey.rows, iRow - k);
                                if(sureConfusedTextImage.at<uchar>(y1, x1) == 0) // counting the number of strong pixels at the surrounding
                                    s_cnt++;
                            }
                        }
                    }

                    if(s_cnt > (0.4*((winy *winx )-1))) // if number of strong pixels is more that 40% of total pixels in the neighbourghood (-1 to avoid the center pixel)
                        CombineBinImage.at<uchar>(iRow, jCol) = 0;
                }
            }
        }
    }
    int morph_size = 2;
    Mat element = getStructuringElement( MORPH_RECT, Size( 2 * morph_size + 1, 2 * morph_size+1 ), Point( morph_size, morph_size ) );
    Mat openedImage; // result matrix
    morphologyEx( CombineBinImage, openedImage, MORPH_OPEN, element, Point(-1,-1), 1 );
    BasicAlgo::getInstance()->writeImageGivenPath(CombineBinImage,"/Users/tmondal/Documents/Combined_Binary_Image.jpg");
    BasicAlgo::getInstance()->writeImageGivenPath(openedImage,"/Users/tmondal/Documents/CombinedOpen_Binary_Image.jpg");









    /**********
                            // BasicAlgo::getInstance()->writeImageGivenPath(foreGdImage,"/Users/tmondal/Documents/8_foregroundImage.jpg"); // putting it on white background
        Mat clusteredImage;
                            //Fuzzy_C_Means_M1::getInstance()->applyAlgoOnImage(foreGdImage, clusteredImage);

        int clusterCount = 5;
        Mat labels;
        int attempts = 5;
        Mat centers;

        K_Means_Clustering::getInstance()->applyOpenCV_KMeans_2(foreGdImage, labels, centers, clusterCount, attempts, clusteredImage );
        // Get unique values in the Mat to understand the number of clusters actually obtained
        std::vector<float> getAllUniqueVals = BasicAlgo::getInstance()->uniqueValuesInMat(clusteredImage,true);
        BasicAlgo::getInstance()->writeImageGivenPath(clusteredImage, "/Users/tmondal/Documents/8_clusteredImage.jpg");



        Mat clusterFormedImg = Mat::zeros(clusteredImage.rows, clusteredImage.cols,CV_8U);
        clusterFormedImg.setTo(255);

        for (int iiRw = 0; iiRw < clusterFormedImg.rows; iiRw++ ){
            for (int jjCol = 0; jjCol < clusterFormedImg.cols; jjCol++ ){

                for (int iVect = 1; iVect < (getAllUniqueVals.size()-2); iVect++){
                    int pxVal = (int)getAllUniqueVals[iVect];
                    if (clusteredImage.at<uchar>(iiRw, jjCol)  == pxVal ) {
                        clusterFormedImg.at<uchar>(iiRw, jjCol) = 0;
                        break;
                    }
                }

            }
        }
        BasicAlgo::getInstance()->writeImageGivenPath(clusterFormedImg, "/Users/tmondal/Documents/9_clusterFormedImage.jpg");



        Mat binImageCopy = BasicProcessingTechniques::getInstance()->ComplementImage(holeFilledImg.clone());
        holeFilledImg.release();
        BasicAlgo::getInstance()->writeImageGivenPath(binImageCopy,"/Users/tmondal/Documents/8_complemented_Image.jpg");

        Mat pppStichedImg = BasicProcessingTechniques::getInstance()->PiecewisePaintingAlgorithm(binImageCopy); // here you have white background and black foreground
        pppStichedImg = BasicProcessingTechniques::getInstance()->ComplementImage(pppStichedImg.clone()); // making again white foreground and black background
        binImageCopy.release();
        BasicAlgo::getInstance()->writeImageGivenPath(pppStichedImg,"/Users/tmondal/Documents/9_pppImage.jpg");
        *********/

    // Applying vertical RLSA
    /*    int verThres = ((getHeightWidth.mean_height*95)/100);
        pppStichedImg = BasicProcessingTechniques::getInstance()->Vertical_RLSATechnique(pppStichedImg, verThres);
        BasicAlgo::getInstance()->writeImageGivenPath(pppStichedImg,"/Users/tmondal/Documents/10_pppImageVerticalRLSA.jpg");*/




    // obtaining the foreground image only
    // Mat foreGdImage;
    /**********
    bitwise_and(imgGrey,pppStichedImg,foreGdImage);
    BasicAlgo::getInstance()->writeImageGivenPath(foreGdImage,"/Users/tmondal/Documents/11_onlyForeGdImage.jpg");

                            // Apply SLIC
                           // Mat SLICImg = Apply_SLIC_SuperPixels::getInstance()->ApplyAnotherSLIC(foreGdImage);
                           // BasicAlgo::getInstance()->writeImageGivenPath(SLICImg,"/Users/tmondal/Documents/12_slicImage.jpg");

    auto end = chrono::steady_clock::now();
    auto diff = end - start;
    cout << chrono::duration <double, milli> (diff).count() << " ms time taken for execution" << endl;

     **********/

}


